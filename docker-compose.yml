services:
  mc:
    image: itzg/minecraft-server
    tty: true
    network_mode: host # this is needed because otherwise it cannot download the server zip file on certain machines
    environment:
      EULA: "TRUE"
      VERSION: 1.20.4
      TYPE: PAPER
      MODE: survival
      ONLINE_MODE: false
      ENFORCE_SECURE_PROFILE: false
      SERVER_PORT: ${MC_SERVER_PORT:-25565}
      RCON_PORT: ${MC_RCON_PORT:-25575}
      RCON_PASSWORD: research
      BROADCAST_RCON_TO_OPS: true
      # MODRINTH_PROJECTS: skinsrestorer,luckperms
      # LEVEL_TYPE: "minecraft:single_biome_surface"
      # GENERATOR_SETTINGS: '{"biome":"minecraft:plains"}'
      LEVEL_TYPE: minecraft:flat
      GENERATOR_SETTINGS: >-
        {
          "layers": [
            { "block": "minecraft:bedrock", "height": 1 },
            { "block": "minecraft:stone",   "height": 124 },
            { "block": "minecraft:dirt",    "height": 2 },
            { "block": "minecraft:grass_block", "height": 1 }
          ],
          "biome": "minecraft:plains"
        }
    volumes:
      # attach the relative directory 'data' to the container's /data path
      - ${MC_DATA_DIR:-./data}:/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mc-monitor status --host localhost --port ${MC_SERVER_PORT:-25565}",
        ]
      interval: 10s
      timeout: 5s
      retries: 12

  sender_alpha:
    image: ojmichel/mc-multiplayer-base:latest
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      mc:
        condition: service_healthy
      receiver_alpha:
        condition: service_started
    volumes:
      # attach the relative directory 'data' to the container's /data path
      - ./output:/output
    environment:
      BOT_NAME: Alpha
      OTHER_BOT_NAME: Bravo
      RECEIVER_HOST: receiver_alpha
      RECEIVER_PORT: 8090
      COORD_PORT: 8100
      OTHER_COORD_HOST: sender_bravo
      OTHER_COORD_PORT: 8100
      BOT_RNG_SEED: "12345"
      EPISODES_NUM: 1
      MC_HOST: host.docker.internal
      MC_PORT: ${MC_SERVER_PORT:-25565}
      RCON_HOST: host.docker.internal
      RCON_PORT: ${MC_RCON_PORT:-25575}
      RCON_PASSWORD: research
      WALK_TIMEOUT: 5
      TELEPORT: 1
      BOOTSTRAP_WAIT_TIME: 1
      ENABLE_CAMERA_WAIT: 1
      ITERATIONS_NUM_PER_EPISODE: 5
      MC_VERSION: "1.20.4"
      CAMERA_READY_RETRIES: 30
      CAMERA_READY_CHECK_INTERVAL: 2000
      VIEWER_RENDERING_DISABLED: 1
      SMOKE_TEST: 1
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: ./entrypoint_senders.sh

  sender_bravo:
    image: ojmichel/mc-multiplayer-base:latest
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      mc:
        condition: service_healthy
      receiver_bravo:
        condition: service_started
      sender_alpha:
        condition: service_started
    volumes:
      # attach the relative directory 'data' to the container's /data path
      - ./output:/output
    environment:
      BOT_NAME: Bravo
      OTHER_BOT_NAME: Alpha
      RECEIVER_HOST: receiver_bravo
      RECEIVER_PORT: 8090
      COORD_PORT: 8100
      OTHER_COORD_HOST: sender_alpha
      OTHER_COORD_PORT: 8100
      BOT_RNG_SEED: "12345"
      EPISODES_NUM: 1
      MC_HOST: host.docker.internal
      MC_PORT: ${MC_SERVER_PORT:-25565}
      RCON_HOST: host.docker.internal
      RCON_PORT: ${MC_RCON_PORT:-25575}
      RCON_PASSWORD: research
      WALK_TIMEOUT: 5
      TELEPORT: 1
      BOOTSTRAP_WAIT_TIME: 1
      ENABLE_CAMERA_WAIT: 1
      ITERATIONS_NUM_PER_EPISODE: 5
      MC_VERSION: "1.20.4"
      CAMERA_READY_RETRIES: 30
      CAMERA_READY_CHECK_INTERVAL: 2000
      VIEWER_RENDERING_DISABLED: 1
      SMOKE_TEST: 1
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: ./entrypoint_senders.sh

  receiver_alpha:
    image: ojmichel/mc-multiplayer-base:latest
    environment:
      PORT: 8090
      NAME: Alpha
      INSTANCE_ID: 0
      EPISODE_START_ID: 0
      VIEWER_RENDERING_DISABLED: 1
    tty: true
    volumes:
      # attach the relative directory 'data' to the container's /data path
      - ./output:/output
    command: ./entrypoint_receiver.sh

  receiver_bravo:
    image: ojmichel/mc-multiplayer-base:latest
    environment:
      PORT: 8090
      NAME: Bravo
      INSTANCE_ID: 0
      EPISODE_START_ID: 0
      VIEWER_RENDERING_DISABLED: 1
    tty: true
    volumes:
      # attach the relative directory 'data' to the container's /data path
      - ./output:/output
    command: ./entrypoint_receiver.sh

  script:
    image: ojmichel/mc-multiplayer-base:latest
    tty: true
    entrypoint: ["sleep", "infinity"]
    restart: "no"
    volumes:
      - .:/usr/src/app
      - ./output:/output

  camera_alpha:
    image: ojmichel/mineflayer-spectator-client:latest
    restart: unless-stopped
    depends_on:
      mc:
        condition: service_healthy
    environment:
      MC_VERSION: "1.20.4"
      MC_HOST: "127.0.0.1"
      MC_PORT: "25565"
      CAMERA_NAME: "CameraAlpha"
      DISPLAY: "${CAMERA_ALPHA_DISPLAY:-:99}"
      VNC_PORT: "${CAMERA_ALPHA_VNC_PORT:-5901}"
      NOVNC_PORT: "${CAMERA_ALPHA_NOVNC_PORT:-6901}"
      WIDTH: "1280"
      HEIGHT: "720"
      FPS: "20"
      VNC_PASSWORD: "${VNC_PASSWORD:-research}"
      ENABLE_RECORDING: "1"
      RECORDING_PATH: "/output/camera_alpha.mp4"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./camera/data_alpha:/root
      - ./camera/output_alpha:/output
      - ./camera/entrypoint.sh:/app/entrypoint.sh:ro
      - ./camera/launch_minecraft.py:/app/launch_minecraft.py:ro

  camera_alpha_follow:
    image: node:20
    container_name: mc_camera_alpha_follow
    network_mode: host
    depends_on:
      mc:
        condition: service_healthy
      camera_alpha:
        condition: service_started
    working_dir: /app
    environment:
      RCON_HOST: "127.0.0.1"
      RCON_PORT: "25575"
      RCON_PASSWORD: "research"
      BOT_NAME: "Alpha"
      CAMERA_NAME: "CameraAlpha"
      RETRIES: "60"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./camera/spectator.js:/app/spectator.js:ro
      - ./camera/package.json:/app/package.json:ro
    command:
      ["sh", "-c", "npm install --omit=dev --no-progress && node spectator.js"]

  camera_bravo:
    image: ojmichel/mineflayer-spectator-client:latest
    restart: unless-stopped
    depends_on:
      mc:
        condition: service_healthy
    environment:
      MC_VERSION: "1.20.4"
      MC_HOST: "127.0.0.1"
      MC_PORT: "25565"
      CAMERA_NAME: "CameraBravo"
      DISPLAY: ":100"
      VNC_PORT: "5902"
      NOVNC_PORT: "6902"
      WIDTH: "1280"
      HEIGHT: "720"
      FPS: "20"
      VNC_PASSWORD: "${VNC_PASSWORD:-research}"
      ENABLE_RECORDING: "1"
      RECORDING_PATH: "/output/camera_bravo.mp4"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./camera/data_bravo:/root
      - ./camera/output_bravo:/output
      - ./camera/entrypoint.sh:/app/entrypoint.sh:ro
      - ./camera/launch_minecraft.py:/app/launch_minecraft.py:ro

  camera_bravo_follow:
    image: node:20
    container_name: mc_camera_bravo_follow
    network_mode: host
    depends_on:
      mc:
        condition: service_healthy
      camera_bravo:
        condition: service_started
    working_dir: /app
    environment:
      RCON_HOST: "127.0.0.1"
      RCON_PORT: "25575"
      RCON_PASSWORD: "research"
      BOT_NAME: "Bravo"
      CAMERA_NAME: "CameraBravo"
      RETRIES: "60"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./camera/spectator.js:/app/spectator.js:ro
      - ./camera/package.json:/app/package.json:ro
    command:
      ["sh", "-c", "npm install --omit=dev --no-progress && node spectator.js"]
